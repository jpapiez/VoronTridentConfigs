#####################################################################
#   print_start macro
#####################################################################
##  User Parameters
##  BED           : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER      : Target temperature for the Extruder
##  CHAMBER       : Target temperature for the chamber fan control
##  FILAMENT      : Filament type
##  NOZZLE        : Nozzle Size
##  SOAK          : Soak time in minutes
##  DELTA_B       : Allowed delta between actual bed temperature and target
##                  temperature for the decision if heat soak is needed.
##  DELTA_C       : Allowed delta between actual chamber temperature and target
##                  will wait until target reached or time is zero
##  CHAMBER_SOAK  : Extra Soak time if Chamber is not on target - DELTA_C
##  EXTRA_SOAK    : Enables Chamber Soak ('true'/'false')
##  LAYER_HEIGHT  : Hight of prime_line should be set to layer_hight
##  Z_ADJUST      : Add extra z offset via slicer
##  FILTER        : Activate Nevermore 1 On 0 Off default On
[gcode_macro PRINT_START]
description: Print Start macro called by slicer start gcode.
variable_var: {'temp'          : {'extruder': 215.0, 'bed': 60.0, 'chamber': 0.0},
               'delta'         : {'chamber': 5.0, 'bed': 10},
               'time'          : {'soak' : 1800, 'soak_extra': 900},
               'redo_bedlevel' : True,
               'prime_height'  : 0.0,
               'z_adjust'      : 0.0,
               'filter'        : True}
## Valid state 
##   Prepare    : Store Params
##   HeatBed    : heat up bed and decide if soak is needed 
##   HeatSoak   : loop the time specified with SOAK
##   Chamber    : decide if extra soak is needed
##   ChamberSoak: loop the time specified with EXTRA_SOAK or Chamber target reached
##   Final      : all what needs to be done after wait time
variable_state: 'Prepare'
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  {% set actBed = printer['temperature_sensor bed'].temperature|float|round(1) if 'temperature_sensor bed' in printer 
             else printer.heater_bed.temperature|float|round(1) %} ; get actual temp from extra sensor or heater sensor

  M117 State: {state}

  ##############################  Prepare phase only done at the first exection of PRINT_START  ##############################
  {% if state == 'Prepare' %}
    #############  Store input parameters  #############
    {% set var = {'temp': {'extruder'   : params.EXTRUDER|default(215)|float|round(1),
                            'bed'       : params.BED|default(60)|float|round(1),
                            'chamber'   : params.CHAMBER|default(0)|float|round(1)},
                  'delta': {'chamber'   : params.DELTA_C|default(5)|float|round(1), 
                            'bed'       : params.DELTA_B|default(10)|float|round(1)},
                  'time' : {'soak'      : params.SOAK|default(30)|int * 60,
                            'soak_extra': params.CHAMBER_SOAK|default(15)|int * 60 if params.EXTRA_SOAK|default('true') == 'true' and 
                                                                                      user.hw.chamber.ena 
                                          else 0},
                'filament_type'         : params.FILAMENT|default('PLA')|string,
                'nozzle_size'           : params.NOZZLE|default(0.4)|float,
                'redo_bedlevel'         : True,
                'prime_height'          : params.LAYER_HEIGHT|float * user.print_start.prime_mult|float if LAYER_HEIGHT in params
                                          else user.prime.pos.z|float,
                'z_adjust'              : params.Z_ADJUST|default(0.0)|float,
                'filter'                : False if params.FILTER|default(1)|int == 0 else True} %}
    {% if user.hw.caselight.ena %} _CASELIGHT_ON {% endif %}             ; switch on light
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED BLINK=1 {% endif %}
    {% if user.hw.chamber.fan %} M141 S0  {% endif %}                    ; exhaust fan off
    {% if user.hw.filter.ena and var.filter %} _FILTER_ON {% endif %}    ; activate filter
  
    {action_respond_info("PRINT_START Variables:\n  BED: %s\n  EXTRUDER: %s\n  CHAMBER: %s\n  FILAMENT: %s\n  NOZZLE: %s" % (var.temp.bed, var.temp.extruder,var.temp.chamber,var.filament_type,var.nozzle_size))}

    #############  Get filament runout info  #############
    {% if not printer.save_variables.variables.filament_loaded|lower == 'true' %}
      {% set filament_detected = false %}
    {% elif user.hw.runout.sensor %}
      {% if printer["filament_" + user.hw.runout.type + "_sensor runout"].enabled|lower == 'true' %}
        {% set filament_detected = printer["filament_" + user.hw.runout.type + "_sensor runout"].filament_detected %}
      {% elif 'filament_loaded' in printer.save_variables.variables %}
        {% set filament_detected = printer.save_variables.variables.filament_loaded %}
      {% else %}
        {% set filament_detected = True %}
      {% endif %}
    {% elif user.hw.runout.type == 'file' %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% else %}
      {% set filament_detected = True %}
    {% endif %}

    {% if not filament_detected %}
      _PRINT_AR T="No Filament loaded, print aborded!"
      CANCEL_PRINT PARK=1 ERROR=1
    {% endif %}

    _CG28                                                                ; home if needed
    G90                                                                  ; absolute position
    G0 Z{user.park.bed.z} F{user.speed.z_hop}                            ; move nozzle to z high first
    G0 X{user.park.bed.x} Y{user.park.bed.y} F{user.speed.travel}        ; home to get toolhead in the middle
    PAUSE_BASE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatBed"'
    UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
  ##############################  HeatBed Phase heat up the bed  ##############################    
  {% elif state == 'HeatBed' %}
    # get max allow bed temp from config. Lower it by 5C to avoid shutdown
    {% set cfg_bed_max = printer.configfile.settings.heater_bed.max_temp|float|round(1) - 5.0 %}
    {% set targetBed = var.temp.bed - var.delta.bed %}
    {% set soakBed = [(var.temp.bed + user.print_start.bed_up), cfg_bed_max]|min %}
    {% if (var.time.soak <= 0) or (actBed >= targetBed) %}  ; check if soak time is 0 or if the bed is still hot
      _PRINT_AR T="Heating Extruder"
      {% set text = 'heat soak disabled' if var.time.soak <= 0 else 'heat soak not needed' %}
      _PRINT_AR T="{"Bed temp: act %3.1f°C min %3.1f°C (target(%3.1f°C) - delta(%2.1f°C)) %s" % 
                    (actBed,targetBed,var.temp.bed,var.delta.bed,text)}"
      {% set _dummy = var.update({'redo_bedlevel' : False}) %}
      M140 S{var.temp.bed}      ; heat bed
      # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
      M109 S150
      M190 S{var.temp.bed}      ; heat bed and wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      _PRINT_AR T="Heating Bed"
      _PRINT_AR T="{"Bed temp: act %3.1f°C min %3.1f°C (target(%3.1f°C) - delta(%2.1f°C)) heat soak needed" % 
                   (actBed,targetBed,var.temp.bed,var.delta.bed)}"
      _PRINT_AR T="{"Set Bed temp to %3.1f°C instead of %3.1f°C for faster heat soak" % (soakBed,var.temp.bed)}"    
      M106 S90              ; switch part cooling ~35% to move air in chamber
      M140 S{soakBed}       ; heat bed
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
      {% set next_duration = user.print_start.ival if var.time.soak > user.print_start.ival else var.time.soak %}
      {% set _dummy = var.time.update({'soak': var.time.soak - user.print_start.ival}) if var.time.soak > user.print_start.ival 
                 else var.time.update({'soak': 0}) %}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% endif%}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    _RUNOUT_INFO    
  ##############################  Heatsoak Phase call the delay macro until time is over  ##############################
  {% elif state == 'HeatSoak' %}
    {% if var.time.soak <= (user.print_start.time.extruder + var.temp.extruder - 240) and 
            var.temp.extruder != printer.extruder.target %} ; check time to start heating extruder
      
      # need to account for tap vs. non-tap. Only Tap needs to be heated to 150 before probing
      M104 S150 ; heat extruder without waiting
    {% endif %}
    {% if var.time.soak <= user.print_start.time.bed and bed != printer.heater_bed.target|int %}  ; check time to reduce bed temp
      M140 S{var.temp.bed} ; heat bed until temp is reached
    {% endif %}
    {% if var.time.soak > 0 %} ; check remaining time
      {% set next_duration = var.time.soak if user.print_start.ival >= var.time.soak else user.print_start.ival %}
      {% set _dummy = var.time.update({'soak': 0}) if user.print_start.ival >= var.time.soak 
                  else var.time.update({'soak': var.time.soak - user.print_start.ival}) %}}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% else %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
      _PRINT_AR T="{"Bed act temp=%3.1fC heat soak done" % (actBed)}"
    {% endif%}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"

  ##############################  Decide if extended soaking is needed  ##############################
  {% elif state == 'Chamber' %}
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer["temperature_" + user.hw.chamber.type + " chamber"].temperature|round(1) if user.hw.chamber.ena
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %}
      _PRINT_AR T="{"Chamber temp: act %2.1f°C min %2.1f°C (target(%2.1f°C) - delta(%2.1f°C)) extra heat soak needed" %
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"ChamberSoak"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      {% set text = 'extra heat soak disabled' if var.time.soak_extra <= 0 else 'extra heat soak not needed' %}
      _PRINT_AR T="{"Chamber temp: act %2.1f°C min %2.1f°C (target(%2.1f°C) - delta(%2.1f°C)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5  
    {% endif %}
  ############################## extra Heat Soak terminated by chamber temp  ##############################
  {% elif state == 'ChamberSoak' %}
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer["temperature_" + user.hw.chamber.type + " chamber"].temperature|round(1) if user.hw.chamber.ena
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %} ; check remaining time and temp difference
      {% set next_duration = var.time.soak_extra if user.print_start.ival >= var.time.soak_extra else user.print_start.ival %}
      {% set _dummy = var.time.update({'soak_extra': 0}) if user.print_start.ival >= var.time.soak_extra
                 else var.time.update({'soak_extra': var.time.soak_extra - user.print_start.ival}) %}}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% else %}
      {% set text = 'extra heat soak timed out' if var.time.soak_extra == 0 else 'chamber temp reached' %}
      _PRINT_AR T="{"Chamber temp: act %2.1f°C min %2.1f°C (target(%2.1f°C) - delta(%2.1f°C)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% endif %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
  ##############################  all whats need to run at the end  ##############################
  {% elif state == 'Final' %}
    RESUME_BASE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"' ; set state for next print    
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED  {% endif %}
    M106 S0                                                               ; turn off part cooling fan
    G34                                                                   ; home & bed level
    {% if user.hw.chamber.fan %} M141 S{var.temp.chamber} {% endif %}     ; set target temp for exhaust fan

    {% if printer['gcode_macro NOZZLECLEAN'] is defined %}
      NOZZLECLEAN
    {% endif %}
    
    G28 Z

    SET_GCODE_OFFSET Z_ADJUST={var.z_adjust} MOVE=1
    _PRINT_OFFSET

    ##  Uncomment for bed mesh (2 of 2)
    _PRINT_AR T="Bed meshing"
    LED_MESHING                                                   # Sets SB-leds to bed mesh-mode
    BED_MESH_CALIBRATE                                            # Starts bed mesh

    {% if printer['gcode_macro SMART_PARK'] is defined %}
      SMART_PARK                                                  # Uses KAMP Smart_Park
    {% else %}
      G1 X{x_wait} Y{y_wait} Z15 F9000                            # Goes to center of the bed
    {% endif %}

    # Heats up the nozzle up to target via data from slicer
    _PRINT_AR T="Heating Hotend: {var.temp.extruder}c"
    LED_HEATING     
    M107                                                          # Turns off partcooling fan
    M109 S{var.temp.extruder}                                     # Heats the nozzle to printing temp

    G21                                                           # set units to millimeters
    G90                                                           # use absolute coordinates
    M83                                                           # use relative distances for extrusion

    LED_PURGE
    {% if printer['gcode_macro VORON_PURGE'] is defined %}
      VORON_PURGE                                                   # KAMP adaptive purge, used with adaptive bed mesh
    {% else %}
      PRIME_LINE PRIME_HEIGHT={var.prime_height}
    {% endif %}

    G92 E0                                                        # Reset extruder	
    LED_PRINTING                                                  # Prep done, start print
    M117 Print in progress
    SFS_ENABLE
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}    


[delayed_gcode _START_PRINT_WAIT]
gcode:
  {% macro print_time(text, time) %} ; print remaining time
    M117 {'%s' % text} {(time|int // 60)}:{'%02d' % (time|int % 60)}
  {% endmacro %}
  {% if printer['gcode_macro PRINT_START'].state == 'HeatSoak'%}
   { print_time("HEAT SOAK", printer['gcode_macro PRINT_START'].var.time.soak) }
  {% elif printer['gcode_macro PRINT_START'].state == 'ChamberSoak' %}
    { print_time("SOAK", printer['gcode_macro PRINT_START'].var.time.soak_extra) }
  {% endif %}
  # Check CANCLE_PRINT was executed
  {% if printer['gcode_macro CANCEL_PRINT'].execute|lower == 'false' %}
    PRINT_START  ; Jump back to PRINT_START
  {% else %} ; break loop and insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}


#####################################################################
# Runs after the print finishes. Must be configured in slicer
#####################################################################
[gcode_macro PRINT_END]
description: All commands after the print
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  # safe anti-stringing move coords
  {% set max = printer.toolhead.axis_maximum %}
  {% set thp = printer.toolhead.position %}
  {% set safe = {'x': thp.x + 20 * (1 if max.x - thp.x > 20 else -1),
                 'y': thp.y + 20 * (1 if max.y - thp.y > 20 else -1),
                 'z': [thp.z + 20, max.z]|min} %}
  
  M400                                                          # wait for buffer to clear
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  G92 E0                                                        # zero the extruder
  M83                                                               ; relative extrusion
  G1 E-{user.filament.retract.end} F{user.speed.retract}            ; retract filament
  G91                                                               ; relative positioning
  G0 X{safe.x} Y{safe.y} Z{safe.z} F{user.speed.travel}             ; move nozzle to remove stringing
  # G0 X{th.axis_maximum.x - 2} Y{th.axis_maximum.y - 2} F3600    # park nozzle at rear corner
  TURN_OFF_HEATERS                                                  ; turn off heaters
  M107                                                              ; turn off fan
  {% if user.hw.chamber.fan %} M141 S{vent_on} {% endif %}          ; vent chamber (setting fan to below ambient)
  G90                                                               ; absolute positioning
  G0 X{user.park.pause.x} Y{user.park.pause.y} F{user.speed.travel} ; park nozzle at brush bin
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=GREEN {% endif %}
  # {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}
  {% if user.hw.chamber.fan %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if user.hw.filter.ena %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if user.unload_sd|lower == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  M220 S100 ; set feedrate percentage back to default
  M221 S100 ; set speed percentage back to default

#####################################################################
#  Cancel the active print
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_execute: False
gcode:
  {% set user       = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filter_off = user.peripheral.filter.run_after_print %}
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  {% set retract    = user.filament.retract.end if not printer.pause_resume.is_paused 
                 else user.filament.retract.cancel %}
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=True

  M117 Cancelling Print...
  CANCEL_PRINT_BASE

  {% if printer['gcode_macro PRINT_START'].state == 'Prepare' %}
    {% if not printer.extruder.can_extrude %}
      {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
      M109 S{printer.configfile.settings.extruder.min_extrude_temp}
    {% endif %}
    M83
    G1 E-{retract} F{user.speed.retract}
  {% endif %}
  TURN_OFF_HEATERS
  {% if params.PARK|default(0)|int == 1 or (not printer.pause_resume.is_paused and user.park.park_at_cancel) %}
    _TOOLHEAD_PARK P={params.PARK|default(0)} X={user.park.pause.x} Y={user.park.pause.y}
  {% endif %}
  M107                                                     # turn off fan
  {% if user.hw.chamber.fan %} M141 S{vent_on} {% endif %} # vent chamber (setting fan to below ambient)
  _ADD_PRINT_TIME
  {% if params.ERROR|default(0)|int == 1 %}
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED BLINK=0.2 {% endif %}
    _SD_PRINT_STATS R='abort'
  {% else %}
   {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE {% endif %}
    _SD_PRINT_STATS R='canceled'
  {% endif %}
  _SD_PRINTER_STATS
  # {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}
  {% if user.hw.chamber.fan %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if user.hw.filter.ena %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if user.unload_sd %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  SFS_DISABLE
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_restore: {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500}
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  ##### store coordinates to restore them at resume #####
  {% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
                                 'extrude'    : printer.gcode_move.absolute_extrude},
                    'speed'   : printer.gcode_move.speed} %}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore VALUE="{restore}"
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE BLINK=1 {% endif %}
  {% if not printer.extruder.can_extrude %}
    {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
    M109 S{printer.configfile.settings.extruder.min_extrude_temp}
  {% endif %}
  M83
  G0 E-{user.filament.retract.pause} F{user.speed.retract}
  PAUSE_BASE
  _TOOLHEAD_PARK P=0 X={params.X|default(user.park.pause.x)} Y={params.Y|default(user.park.pause.y)}
  M104 S{printer.extruder.target}

[gcode_macro _TOOLHEAD_PARK]
description: Helper: Park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set pos = {'x': user.park.bed.x if params.P|int == 1 
                else params.X,
                'y': user.park.bed.y if params.P|int == 1 
                else params.Y,
                'z': user.park.bed.z if params.P|int == 1 
                else [(printer.toolhead.position.z + user.park.pause.dz), printer.toolhead.axis_maximum.z]|min} %}
  G90
  G0 Z{pos.z} F{user.speed.z_hop}
  G0 X{pos.x} Y{pos.y} F{user.speed.travel}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set restore  = printer["gcode_macro PAUSE"].restore %}
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED {% endif %}
  RESUME_BASE VELOCITY={params.VELOCITY|default(user.speed.travel/60)}  
  G0 E{user.filament.retract.pause} F{user.speed.retract}
  G0 F{restore.speed}
  {% if restore.absolute.extrude %}         M82 {% endif %} ; set back to absolute
  {% if not restore.absolute.coordinates %} G91 {% endif %} ; set back to relative


[gcode_macro G34]
description: Reset bed mesh, offset and execute Bed Leveling
gcode:
  _PRINT_AR T="Home & Bed Level" SHOW_LCD=true
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0 MOVE=1
 
  {% if printer['gcode_macro PRINT_START'].var.redo_bedlevel|lower == 'true' %}
    _PRINT_AR T="Bed Level forced by PRINT_START"
    LED_LEVELING                                                  # Sets SB-leds to leveling-mode
    {% if printer.configfile.settings.quad_gantry_level %}
      QUAD_GANTRY_LEVEL PARK=false HOME=false
    {% elif printer.configfile.settings.z_tilt %}
      Z_TILT_ADJUST
    {% endif %}
  {% elif printer.configfile.settings.quad_gantry_level and printer.quad_gantry_level.applied|lower == 'false' %}
    _PRINT_AR T="Bed Level not executed yet. Running Quad Gantry Level"
    LED_LEVELING                                                  # Sets SB-leds to leveling-mode
    QUAD_GANTRY_LEVEL PARK=false HOME=false
  {% elif printer.configfile.settings.z_tilt and printer.z_tilt.applied|lower == 'false' %}
    _PRINT_AR T="Bed Level not executed yet. Running Z-Tilt Adjust"
    LED_LEVELING                                                  # Sets SB-leds to leveling-mode
    Z_TILT_ADJUST
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1


### This is to allow use of slicer M73 est time update (Prusa/Marlin based)
### Activated in SuperSlicer Printer / General / Firmware
### Modify M73 ###
[gcode_macro M73]
rename_existing: M73.1
variable_p: 0.0
variable_r: 0.0
gcode:
  # Use a default 0 if _P is omitted.
  {% set P = params.P|default(0)|int %}
  # Use a default 0 if _R is omitted.
  {% set R = params.R|default(0)|int %}
  M73.1 P{P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}


[gcode_macro M204]
description: Set and limit acceleration to cfg value
rename_existing: M204.1
gcode:
  {% set accel = params.S|float                      if 'S' in params and params.S|float > 0
            else [params.P|float,params.T|float]|min if 'P' in params and 'T' in params and 
                                                     params.P|float > 0 and params.T|float > 0 %}
  {% if accel is defined %}  
    {% set lim_accel          = [accel,     printer.configfile.settings.printer.max_accel         ]|min %}
    {% set lim_accel_to_decel = [accel / 2, printer.configfile.settings.printer.max_accel_to_decel]|min %}
    SET_VELOCITY_LIMIT ACCEL={lim_accel} ACCEL_TO_DECEL={lim_accel_to_decel}
  {% else %}
    {action_respond_info("Invalid M204 command \"M204 %s\"" % rawparams)}
  {% endif %}
  
## show remaining time ## 
[display_template _PRINTING_TIME]
text:
  {% set ptime = printer["gcode_macro M73"].r %}
  { "%02d:%02d" % (ptime // 60, ptime % 60) }

[gcode_macro M900]
description: Set pressure advance
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)}

[gcode_macro _PRINT_OFFSET]
description: Helper: Print gcode offsets defined by script or user in PRINT_START
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["GCODE OFFSET for Z applied from:"] %}
  {% if user.hw.auto_z_offset.manu %}
    {% set _dummy = text.append("Plate %s %.3fmm" % 
           (printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].name,
            printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].offset)) %}
  {% endif %}
  {% if user.hw.auto_z_offset.auto %}
    {% set _dummy = text.append("Z_CALIBRATE %.3fmm" % printer.z_calibration.last_z_offset) %}
  {% endif %}
  {% set _dummy = text.append("User %.3fmm" % printer['gcode_macro PRINT_START'].var.z_adjust) %}
  {% set _dummy = text.append("Total %.3fmm" % printer.gcode_move.homing_origin.z) %}
  {action_respond_info(text|join("\n"))}

## PrusaSlicer/SuperSlicer:
## Add at the start gcode section
## _LAYER TOTAL=[total_layer_count] RESPOND=0
##
## Add at the layer change gcode section
## _LAYER CURRENT={layer_num+1}
[gcode_macro _LAYER]
description: Pass the current layer and the total amount of layers by your Slicer.
variable_layer: {'current': 0, 'total':0}
gcode:
  {% set _dummy = layer.update({'total':params.TOTAL|int}) if ('TOTAL' in params and params.TOTAL|int > 0) %}
  {% set _dummy = layer.update({'current':params.CURRENT|default(0)|int}) %}
  SET_GCODE_VARIABLE MACRO=_LAYER VARIABLE=layer VALUE="{layer}"
  {% if params.RESPOND|default(printer['gcode_macro _USER_VARIABLE'].respond.layer)|int == 1 %}
    {action_respond_info("Layer %s of %s" % (layer.current, layer.total))}
  {% endif %}

[gcode_macro TOGGLE_LAYER_OUTPUT]
description: Enable/Disable Console output of _LAYER
gcode:
  {% set respond = printer['gcode_macro _USER_VARIABLE'].respond %}
  {% set _dummy = respond.update({'layer':1}) if respond.layer|int == 0 else respond.update({'layer':0}) %}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond}"

[gcode_macro PREHEAT]
description: Park printhead and optionally start Nevermore for preheat
gcode:
  {% set fan = params.FAN|default(0)|int %}
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  
  {% if fan == 1 %}
    SET_FAN_SPEED FAN=filter SPEED=1                # Turn on Nevermore fans to circulate & accelerate chamber soak
  {% endif %}
  
  _CG28                                                    # Conditional Home
  G90                                                      # Set to absolute
  PARK P=bed                                               # Park toolhead in safe location (center volume)

[gcode_macro PROBE_CALIBRATE]
description: Calibrate Z height with LED settings
rename_existing: PROBE_CALIBRATE_O
gcode:
  LED_PROBE_CALIBRATE
  PROBE_CALIBRATE_O

##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

## Reset SD File after Print_END or CANCEL_PRINT
## This will avoid the reprint option in Mainsail after a print is done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro DIRECT_MOVE]
gcode:
  {% set out_param = ["G0"] %}
  {% set _dummy = out_param.append("X%s" % params.X) if params.X %}
  {% set _dummy = out_param.append("Y%s" % params.Y) if params.Y %}
  {% set _dummy = out_param.append("Z%s" % params.Z) if params.Z %}
  {% set _dummy = out_param.append("E%s" % params.E) if params.E %}
  {% set _dummy = out_param.append("F%s" % params.F) if params.F %}
  {out_param|join(" ")}

##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set out = ['mcu build version:'] %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% if name2 is in ['mcu_version'] %}
        {% set _dummy = out.append("%s: %s" % (name1, printer[name1][name2])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(out|join("\n"))}
  M115.1

[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(210)|float %} 
  LED_HEATING
  M117 PID Calibrating Extruder
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  M117 PID Saving Configuration
  SAVE_CONFIG
 
[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %} 
  LED_HEATING
  M117 PID Calibrating Bed
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  M117 PID Saving Configuration
  SAVE_CONFIG
