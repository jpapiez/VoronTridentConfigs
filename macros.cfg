#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  LED_HOMING         # Sets SB-leds to homing-mode
  G28                   # Full home (XYZ)
  G90                   # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR       # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    LED_HEATING                                      # Sets SB-leds to heating-mode
    M106 S255                                           # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Displays info
    LED_HEATING                                      # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    M190 S{target_bed}                                  # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Bed heat for 1min"            # Displays info
    G4 P60000                                           # Waits 1 min for the bedtemp to stabilize
  {% endif %}

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Hotend: 150c"          # Displays info
  M109 S150                                    # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"     # Displays info
  LED_LEVELING                          # Sets SB-leds to leveling-mode
  Z_TILT_ADJUST                            # Levels the buildplate via z_tilt_adjust
  G28 Z                                    # Homes Z again after z_tilt_adjust

  ##  Uncomment for Klicky auto-z
  #CALIBRATE_Z                                 # Calibrates Z-offset with klicky
  #SET_DISPLAY_TEXT MSG="Z-offset"             # Displays info

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  LED_MESHING                     # Sets SB-leds to bed mesh-mode
  bed_mesh_calibrate                 # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  LED_HEATING                                                # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  LED_PRINTING                                  # Sets SB-leds to printing-mode
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolute position

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

# [gcode_macro CHOME]
# description: Homes XYZ axis only if printer is in a non-homed state
# gcode:
#   {% if "xyz" not in printer.toolhead.homed_axes %}
#     G28
#   {% endif %}

# [gcode_macro UNLOAD_FILAMENT]
# description: Unloads filament from toolhead
# gcode:
#   {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
#   CHOME
#   G91                         ; relative positioning
#   G1 Z20                      ; move nozzle upwards
#   FRONT                       ; move the toolhead to the front
#   M109 S{EXTRUDER_TEMP}       ; heat up the hotend
#   M83                         ; set extruder to relative mode
#   G1 E-8 F1800                ; quickly retract a small amount to elimate stringing
#   G4 P200                     ; pause for a short amount of time
#   G1 E-50 F300                ; retract slowly the rest of the way
#   G1 E-20 F300
#   M400                        ; wait for moves to finish
#   M117 Unload Complete!

# [gcode_macro LOAD_FILAMENT]
# description: Loads new filament into toolhead
# gcode:
#   {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
#   FRONT                       ; move the toolhead to the front
#   M109 S{EXTRUDER_TEMP}       ; heat up the hotend
#   M83                         ; set extruder to relative mode
#   G1 E50 F300                 ; extrude slowlyL
#   G1 E50 F300
#   M400                        ; wait for moves to finish
#   M117 Load Complete!

[gcode_macro CENTER]
description: Moves the toolhead to the center
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y{x_center} F7800

[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800

[gcode_macro NOZZLE_PURGE]
description: Draw a purge line at the front left edge of the build plate
gcode:
  CHOME
  G0 X2.5 Y4 F3000 ; Go to front
  G0 Z0.15 ; Drop to bed
  M83 ; Set extruder to relative mode
  G1 X45 E15 F500 ; Extrude 25mm of filament in a 4cm line
  G1 E-0.5 F400 ; Retract a little
  G1 X85 F4000 ; Quickly wipe away from the filament line
  G1 Z0.3 ; Raise and begin printing.

[gcode_macro LIGHT_ON]
variable_delay_ms: 50
variable_led_count: 8
gcode:
  {% for led_index in range(1, led_count + 1) %}
    SET_LED LED=rgb1 RED=0.8 GREEN=0.8 BLUE=0.99 INDEX={led_index}
    SET_LED LED=rgb2 RED=0.8 GREEN=0.8 BLUE=0.99 INDEX={led_index}
    G4 P{delay_ms}
  {% endfor %}
 
 [gcode_macro PARK]
description: Park tool head at specified location. Usage PARK [P=[bed|center|front|frontlow|rear](bed)]
gcode:
  {% if params.P and params.P|lower is not in ['bed','center','front','frontlow','rear'] %}
    {action_respond_info("\"PARK P=%s\" not valid. Use P=[BED,CENTER,FRONT,FRONTLOW,REAR]
                            Default position BED will be used." % params.P|upper)}
  {% else %}
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set pos = params.P|default('bed')|lower %}
    _CG28          ; Home if not already homed
    G90            ; Absolute positioning
    G0 X{user.park[pos].x} Y{user.park[pos].y} Z{user.park[pos].z} F{user.speed.travel}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set back to relative
  {% endif %}


[gcode_macro G28]
description: G28 homing with SB LED status
rename_existing: G2828
gcode:
  LED_HOMING
  RESPOND MSG="Homing"
  G2828 { rawparams }
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  LED_STANDBY


[gcode_macro _CG28]
description: Conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 { rawparams }
  {% endif %}


### This is to allow use of slicer M73 est time update (Prusa/Marlin based)
### Activated in SuperSlicer Printer / General / Firmware
### Modify M73 ###
[gcode_macro M73]
rename_existing: M73.1
variable_p: 0.0
variable_r: 0.0
gcode:
  # Use a default 0 if _P is omitted.
  {% set P = params.P|default(0)|int %}
  # Use a default 0 if _R is omitted.
  {% set R = params.R|default(0)|int %}
  M73.1 P{P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}


##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
# copied from zellneralex
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117


## show remaining time ## 
[display_template _printing_time]
text:
  {% set ptime = printer["gcode_macro M73"].r %}
  { "%02d:%02d" % (ptime // 60, ptime % 60) }

  
[gcode_macro _HEATSOAK]
description: Helper: Set up to heat soak printer. Usage: _HEATSOAK [TEMP=temp(110)] [MOVE=move(1)]
gcode:
  {% set temp = params.TEMP|default(110)|int %}
  {% set move = params.MOVE|default(1)|int %}
	
	LED_HEATING
  RESPOND MSG="Warming up"
	M141 S0                                                 # Turn off exhaust fan
	M140 S{temp}                                            # Heat the bed
  M104 S150                                               # Set hotend to no-ooze temp & for Tap warm probing
	{% if temp >= 100 %}                                    # It's ABS or other high-temp plastic, closed case
		M106 S205                                             # Turn on part fan to 80% for 
		SET_FAN_SPEED FAN=nevermore_fan SPEED=1                   # Turn on Nevermore fans to circulate & accelerate chamber soak
	{% else %}
    M106 S0                                               # Turn off part fan. Open case, no need
		SET_FAN_SPEED FAN=nevermore_fan SPEED=0                   # Make sure Nevermore is off
	{% endif %}

	{% if move == 1 %}
		_CG28                                                 # Conditional home
		PARK P=bed                                            # Park toolhead in safe location (center volume)
		LED_HEATING
	{% endif %}


[gcode_macro PREHEAT]
description: Park printhead and optionally start Nevermore for preheat
gcode:
  {% set fan = params.FAN|default(0)|int %}
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  
  {% if fan == 1 %}
    SET_FAN_SPEED FAN=nevermore_fan SPEED=1                    # Turn on Nevermore fans to circulate & accelerate chamber soak
  {% endif %}
  
  _CG28                                                    # Conditional Home
  G90                                                      # Set to absolute
  PARK P=bed                                               # Park toolhead in safe location (center volume)
  

[gcode_macro PROBE_CALIBRATE]
description: Calibrate Z height with LED settings
rename_existing: PROBE_CALIBRATE_O
gcode:
	LED_PROBE_CALIBRATE
	PROBE_CALIBRATE_O


[gcode_macro PRINT_START_MULTIMATERIAL]
description: Print Start macro called by slicer start gcode. No z-tilt or meshing.
gcode:
  # Parameters
  {% set bedtemp = params.BED|default(60)|int %}
  {% set hotendtemp = params.HOTEND|default(215)|int %}
  {% set chambertemp = params.CHAMBER|default(0)|int %}
  {% set flSize = params.SIZE|default("0_0_0_0")|string %} # For adaptive bed mesh OBSOLETE
  {% set _filament = params.FILAMENT|string %}
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filament = printer.save_variables.variables.filament %}

  # Check if filament loaded if sensor on
  {% if not printer.save_variables.variables.filament_loaded|lower == 'true' %}
    {% set filament_detected = false %}
  {% elif printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
    {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected %}
  {% else %}
    {% set filament_detected = true %}
	{% endif %}
  {% if filament_detected %}
    {% if filament.array[filament.index].name != _filament %}
      RESPOND TYPE=error MSG="WARNING! Loaded filament and print file filament mismatch!"
    {% endif %}

		M141 S0                                                  # Turn off exhaust fan	
    UPDATE_DELAYED_GCODE ID=skirt_fan DURATION=0             # Stop controller fan loop
    SET_FAN_SPEED FAN=controller_fan SPEED=1                 # Turn controller fan on  
		_CG28                                                    # Conditional Home
		G90                                                      # Set to absolute

    ## Do heatsoak
    {% if printer["temperature_fan chamber"].temperature < chambertemp %}
		  _HEATSOAK TEMP={bedtemp} MOVE=1                        # Set up to heat soak if chamber temp is set higher than current reading
      M190 S{bedtemp}                                        # Set target bed temp & wait for it
      TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={chambertemp}   # Do the actual heat soak wait, until chamber temp is at target
		{% else %}
			{% if printer.heater_bed.temperature < (bedtemp-2) %}
        _HEATSOAK TEMP={bedtemp} MOVE=1	        						# Bed is below target temp, get it heating & safely park toolhead
        M190 S{bedtemp}                                     # Set bed target temp & wait for it
			{% else %}
				_HEATSOAK TEMP={bedtemp} MOVE=0                     # Just do a bed heat, no champer temp (open case for PLA)
			{% endif %}
		{% endif %}
		M106 S0                                                 # Turn off part cooling fan from heatsoak
		
    CLEAN_NOZZLE DOPURGE=0                                   # make sure there's no ooze for Tap, only scrub the nozzle

		LED_HEATING
    SMART_PARK                                               # KAMP smart parking
    RESPOND MSG="Heating nozzle"
    M106 S205
		M109 S{hotendtemp}                                       # Do final nozzle heat
		G1 E{user.filament.retract.end} F3600                    # Extrude to account for clean_nozzle retraction
    CLEAN_NOZZLE DOPURGE=0                                   # Remove ooze

    {% if user.hw.auto_z_offset.type == "flexplate" %}
		  _SET_PLATE_OFFSET                                     # Add current plate Z offset adjustment
	  {% endif %}
	
	  G92 E0                                                   # Reset extruder	
    M83                                                      # Extruder to relative
  
    LED_PURGE
    VORON_PURGE                                              # KAMP adaptive purge, used with adaptive bed mesh
		G92 E0                                                   # Reset extruder	
		LED_PRINTING                                             # Prep done, start print
    RESPOND MSG="Printing"
		UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
	{% else %} # no filament loaded
    RESPOND TYPE=error MSG="No filament loaded, print canceled!"
		CANCEL_PRINT
	{% endif %}

[gcode_macro PRINT_END_MULTIMATERIAL]
description: Called from slicer end gcode. Post-print cleanup. No mesh clear and leave heaters on.
gcode:
  {% set _filament = params.FILAMENT|default("")|string %}
  {% set chamber = params.CHAMBER|default(0)|int %}
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set th = printer.toolhead %}
  {% set safe = {'x' : user.purge.purge.x,
   				       'y' : user.purge.purge.y,
   				       'z' : [th.position.z + 5, th.axis_maximum.z]|min} %}	 ; Define safe position (over purge bucket, lift 5mm)
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  M400																	                               ; Clear buffer
  G90																	                                 ; Absolute position
  //G0 X{safe.x} Y{safe.y} Z{safe.z} F{user.speed.travel}				         ; Move to safe location, prevent stringing
  SMART_PARK                                                           ; Return to adaptive park position. Easier to swap filament(?)
  G92 E0																                               ; Reset extruder
  G1 E-75 F{user.speed.retract}	    		                               ; Eject filament, prepare for swapping to next color
  G0 X{user.park.pause.x} Y{user.park.pause.y} F{user.speed.travel}    ; Park toolhead at purge bucket

  #STOP_WEBCAM                                                         ; Turn off webcam. Lighten workload on RPi
  UPDATE_DELAYED_GCODE ID=skirt_fan DURATION=5                         ; Restart controller fan loop
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=3
  LED_STANDBY
  #UPDATE_DELAYED_GCODE ID=led_sleep DURATION=7200                     ; Set to turn off LEDs after 2 hours of inactivity
  