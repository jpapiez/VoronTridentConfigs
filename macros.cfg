#####################################################################
#   print_start macro
#####################################################################
[gcode_macro PRINT_START]
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set filament_type = params.FILAMENT|string %}
  {% set nozzle_size =  params.NOZZLE|default(0.4)|float %}

  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  {% set filament = printer.save_variables.variables.filament %}

  {% if user.hw.caselight.ena %} _CASELIGHT_ON {% endif %}      # switch on light

  RESPOND TYPE=command MSG="PRINT_START :: BED: {target_bed}, EXTRUDER: {target_extruder}, CHAMBER: {target_chamber}, FILAMENT: {filament_type}, NOZZLE: {nozzle_size}"

  # Check if filament loaded if sensor on
  {% if not printer.save_variables.variables.filament_loaded|lower == 'true' %}
    {% set filament_detected = false %}
  {% elif printer['filament_switch_sensor runout'].enabled|lower == 'true' %}
    {% set filament_detected = printer['filament_switch_sensor runout'].filament_detected %}
  {% else %}
    {% set filament_detected = true %}
  {% endif %}

  {% if not filament_detected %}
    # no filament loaded
    RESPOND TYPE=error MSG="No filament loaded, print canceled!"
    CANCEL_PRINT
  {% else %}
    # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
    LED_HOMING                                                    # Sets SB-leds to homing-mode
    G28                                                           # Full home (XYZ)
    G90                                                           # Absolute position

    BED_MESH_CLEAR                                                # Clears old saved bed mesh (if any)

    ## Do heatsoak
    {% if printer["temperature_fan chamber"].temperature < target_chamber %}
      _HEATSOAK TEMP={target_bed}                                 # Set up to heat soak if chamber temp is set higher than current reading
      M190 S{target_bed}                                          # Set target bed temp & wait for it
      TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={target_chamber}   # Do the actual heat soak wait, until chamber temp is at target
    {% else %}
      {% if printer.heater_bed.temperature < (target_bed-2) %}
        _HEATSOAK TEMP={target_bed}      	                        # Bed is below target temp, get it heating & safely park toolhead
        M190 S{target_bed}                                        # Set bed target temp & wait for it
      {% else %}
        _HEATSOAK TEMP={target_bed} MOVE=0                        # Just do a bed heat, no champer temp (open case for PLA)
      {% endif %}
    {% endif %}

    #CLEAN_NOZZLE                                                 # Clean nozzle BEFORE bed level when using TAP

    # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
    SET_DISPLAY_TEXT MSG="Heating Hotend: 150c"                   # Displays info
    M109 S150                                                     # Heats the nozzle to 150c

    ##  Uncomment for Trident (Z_TILT_ADJUST)
    SET_DISPLAY_TEXT MSG="Z-tilt adjust"                          # Displays info
    LED_LEVELING                                                  # Sets SB-leds to leveling-mode
    Z_TILT_ADJUST                                                 # Levels the buildplate via z_tilt_adjust
    G28 Z                                                         # Homes Z again after z_tilt_adjust

    ##  Uncomment for bed mesh (2 of 2)
    SET_DISPLAY_TEXT MSG="Bed meshing"                            # Displays info
    LED_MESHING                                                   # Sets SB-leds to bed mesh-mode
    BED_MESH_CALIBRATE                                            # Starts bed mesh

    # Heats up the nozzle up to target via data from slicer
    SET_DISPLAY_TEXT MSG="Heating Hotend: {target_extruder}c"     # Displays info
    LED_HEATING                                                   # Sets SB-leds to heating-mode

    {% if printer['gcode_macro SMART_PARK'] is defined %}
      SMART_PARK                                                  # Uses KAMP Smart_Park
    {% else %}
      G1 X{x_wait} Y{y_wait} Z15 F9000                            # Goes to center of the bed
    {% endif %}
    M107                                                          # Turns off partcooling fan
    M109 S{target_extruder}                                       # Heats the nozzle to printing temp

    # Gets ready to print by doing a purge line and updating the SB-leds
    LED_PURGE
    VORON_PURGE                                                   # KAMP adaptive purge, used with adaptive bed mesh
    G92 E0                                                        # Reset extruder	
    LED_PRINTING                                                  # Prep done, start print
    SET_DISPLAY_TEXT MSG="Print in progress"
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
    SFS_ENABLE
  {% endif %}

#####################################################################
# Runs after the print finishes. Must be configured in slicer
#####################################################################
[gcode_macro PRINT_END]
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  # safe anti-stringing move coords
  {% set th = printer.toolhead %}
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}
  
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  
  M400                                                          # wait for buffer to clear
  G92 E0                                                        # zero the extruder
  G1 E-2.0 F3600                                                # retract filament
    
  TURN_OFF_HEATERS
  
  G90                                                           # absolute positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F2000                        # move nozzle to remove stringing
  G0 X{th.axis_maximum.x - 2} Y{th.axis_maximum.y - 2} F3600    # park nozzle at rear corner
  M107                                                          # turn off fan

  # {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}

  # Disables Nevermore if equipped
  {% if user.hw.filter.ena %} 
    SET_PIN PIN=nevermore VALUE=0                               # Turns off the nevermore
  {% endif %}

  BED_MESH_CLEAR
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#####################################################################
#  Cancel the active print
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_execute: False
gcode:
  {% set user       = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filter_off = user.peripheral.filter.run_after_print %}
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  {% set retract    = user.filament.retract.end if not printer.pause_resume.is_paused 
                 else user.filament.retract.cancel %}
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=True

  SET_DISPLAY_TEXT MSG="Cancelling Print..."
  CANCEL_PRINT_BASE
  {% if printer['gcode_macro PRINT_START'].state == 'Prepare' %}
    {% if not printer.extruder.can_extrude %}
      {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
      M109 S{printer.configfile.settings.extruder.min_extrude_temp}
    {% endif %}
    M83
    G1 E-{retract} F{user.speed.retract}
  {% endif %}
  TURN_OFF_HEATERS
  {% if params.PARK|default(0)|int == 1 or (not printer.pause_resume.is_paused and user.park.park_at_cancel) %}
    _TOOLHEAD_PARK P={params.PARK|default(0)} X={user.park.pause.x} Y={user.park.pause.y}
  {% endif %}
  M107                                                     ; turn off fan
  {% if user.hw.chamber.fan %} M141 S{vent_on} {% endif %} ; vent chamber (setting fan to below ambient)

  # {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}
  {% if user.hw.chamber.fan %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if user.hw.filter.ena %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if user.unload_sd %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  SFS_DISABLE
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_restore: {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500}
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  ##### store coordinates to restore them at resume #####
  {% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
                                 'extrude'    : printer.gcode_move.absolute_extrude},
                    'speed'   : printer.gcode_move.speed} %}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore VALUE="{restore}"
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE BLINK=1 {% endif %}
  {% if not printer.extruder.can_extrude %}
    {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
    M109 S{printer.configfile.settings.extruder.min_extrude_temp}
  {% endif %}
  M83
  G0 E-{user.filament.retract.pause} F{user.speed.retract}
  PAUSE_BASE
  _TOOLHEAD_PARK P=0 X={params.X|default(user.park.pause.x)} Y={params.Y|default(user.park.pause.y)}
  M104 S{printer.extruder.target}

[gcode_macro _TOOLHEAD_PARK]
description: Helper: Park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set pos = {'x': user.park.bed.x if params.P|int == 1 
                else params.X,
                'y': user.park.bed.y if params.P|int == 1 
                else params.Y,
                'z': user.park.bed.z if params.P|int == 1 
                else [(printer.toolhead.position.z + user.park.pause.dz), printer.toolhead.axis_maximum.z]|min} %}
  G90
  G0 Z{pos.z} F{user.speed.z_hop}
  G0 X{pos.x} Y{pos.y} F{user.speed.travel}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set restore  = printer["gcode_macro PAUSE"].restore %}
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED {% endif %}
  RESUME_BASE VELOCITY={params.VELOCITY|default(user.speed.travel/60)}  
  G0 E{user.filament.retract.pause} F{user.speed.retract}
  G0 F{restore.speed}
  {% if restore.absolute.extrude %}         M82 {% endif %} ; set back to absolute
  {% if not restore.absolute.coordinates %} G91 {% endif %} ; set back to relative

  # You can specify the park_pos variable manually if you do not want 
# to use a _USER_VARIABLE macro, The set statement would look like:
# {% set park_pos = {'x': val, 'y': val, 'z': val} %}
# e.g.
# {% set park_pos = {'x': 175.0, 'y': 25.0, 'z': 30.0 } %}

[gcode_macro PARK]
description: Park tool head at specified location. Usage PARK [P=[bed|center|front|frontlow|rear](bed)]
gcode:
  {% if params.P and params.P|lower is not in ['bed','center','front','frontlow','rear'] %}
    {action_respond_info("\"PARK P=%s\" not valid. Use P=[BED,CENTER,FRONT,FRONTLOW,REAR]
                            Default position BED will be used." % params.P|upper)}
  {% else %}
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set pos = params.P|default('bed')|lower %}
    _CG28                 ; home if not already homed
    G90                   ; absolute positioning
    G0 X{user.park[pos].x} Y{user.park[pos].y} Z{user.park[pos].z} F{user.speed.travel}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set back to relative
  {% endif %}

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
  PARK P='BED'

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
  PARK P='CENTER'

# Park front center
[gcode_macro PARKFRONT]
gcode:
  PARK P='FRONT'

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
  PARK P='FRONTLOW'

# Park top rear left
[gcode_macro PARKREAR]
gcode:
  PARK P='REAR'

### This is to allow use of slicer M73 est time update (Prusa/Marlin based)
### Activated in SuperSlicer Printer / General / Firmware
### Modify M73 ###
[gcode_macro M73]
rename_existing: M73.1
variable_p: 0.0
variable_r: 0.0
gcode:
  # Use a default 0 if _P is omitted.
  {% set P = params.P|default(0)|int %}
  # Use a default 0 if _R is omitted.
  {% set R = params.R|default(0)|int %}
  M73.1 P{P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P}
  SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R}

## show remaining time ## 
[display_template _printing_time]
text:
  {% set ptime = printer["gcode_macro M73"].r %}
  { "%02d:%02d" % (ptime // 60, ptime % 60) }

[gcode_macro _HEATSOAK]
description: Helper: Set up to heat soak printer. Usage: _HEATSOAK [TEMP=temp(110)]
gcode:
  {% set temp = params.TEMP|default(110)|int %}
  
  LED_HEATING
  RESPOND MSG="Warming up"
  M141 S0                                                 # Turn off exhaust fan
  M140 S{temp}                                            # Heat the bed
  M104 S150                                               # Set hotend to no-ooze temp & for Tap warm probing
  {% if temp >= 100 %}                                    # It's ABS or other high-temp plastic, closed case
    M106 S205                                             # Turn on part fan to 80% for 
    SET_FAN_SPEED FAN=nevermore_fan SPEED=1               # Turn on Nevermore fans to circulate & accelerate chamber soak
  {% else %}
    M106 S0                                               # Turn off part fan. Open case, no need
    SET_FAN_SPEED FAN=nevermore_fan SPEED=0               # Make sure Nevermore is off
  {% endif %}

  {% if move == 1 %}
    _CG28                                                 # Conditional home
    PARK P=bed                                            # Park toolhead in safe location (center volume)
    LED_HEATING
  {% endif %}

[gcode_macro PREHEAT]
description: Park printhead and optionally start Nevermore for preheat
gcode:
  {% set fan = params.FAN|default(0)|int %}
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  
  {% if fan == 1 %}
    SET_FAN_SPEED FAN=nevermore_fan SPEED=1                # Turn on Nevermore fans to circulate & accelerate chamber soak
  {% endif %}
  
  _CG28                                                    # Conditional Home
  G90                                                      # Set to absolute
  PARK P=bed                                               # Park toolhead in safe location (center volume)

[gcode_macro PROBE_CALIBRATE]
description: Calibrate Z height with LED settings
rename_existing: PROBE_CALIBRATE_O
gcode:
  LED_PROBE_CALIBRATE
  PROBE_CALIBRATE_O

##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

## Reset SD File after Print_END or CANCEL_PRINT
## This will avoid the reprint option in Mainsail after a print is done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro DIRECT_MOVE]
gcode:
  {% set out_param = ["G0"] %}
  {% set _dummy = out_param.append("X%s" % params.X) if params.X %}
  {% set _dummy = out_param.append("Y%s" % params.Y) if params.Y %}
  {% set _dummy = out_param.append("Z%s" % params.Z) if params.Z %}
  {% set _dummy = out_param.append("E%s" % params.E) if params.E %}
  {% set _dummy = out_param.append("F%s" % params.F) if params.F %}
  {out_param|join(" ")}

##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set out = ['mcu build version:'] %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% if name2 is in ['mcu_version'] %}
        {% set _dummy = out.append("%s: %s" % (name1, printer[name1][name2])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(out|join("\n"))}
  M115.1

[gcode_macro CENTER]
description: Moves the toolhead to the center
gcode:
  _CG28
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y{x_center} F7800

[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  _CG28
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800

[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(210)|float %} 
  LED_HEATING
  M117 PID Calibrating Extruder
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  M117 PID Saving Configuration
  SAVE_CONFIG
 
[gcode_macro PID_BED]
description: PID Tune for the Bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(60)|float %} 
  LED_HEATING
  M117 PID Calibrating Bed
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  M117 PID Saving Configuration
  SAVE_CONFIG
