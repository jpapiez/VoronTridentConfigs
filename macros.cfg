#####################################################################
#   print_start macro
#####################################################################
## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default(0)|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  {% if user.hw.caselight.ena %} _CASELIGHT_ON {% endif %}      # switch on light

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  LED_HOMING                                                    # Sets SB-leds to homing-mode
  G28                                                           # Full home (XYZ)
  G90                                                           # Absolut position

  ##  Uncomment for bed mesh (1 of 2)
  BED_MESH_CLEAR                                                # Clears old saved bed mesh (if any)

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Heating bed {target_bed}c"            # Displays info
    LED_HEATING                                                 # Sets SB-leds to heating-mode
    M106 S255                                                   # Turns on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                              # Turns on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                            # Goes to center of the bed
    M190 S{target_bed}                                          # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoaking {target_chamber}c"        # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_fan chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c, then it skips the heatsoak and just heats up to set temp with a 5min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"                   # Displays info
    LED_HEATING                                                 # Sets SB-leds to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                            # Goes to center of the bed
    M190 S{target_bed}                                          # Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Bed heat for 1min"                    # Displays info
    G4 P60000                                                   # Waits 1 min for the bedtemp to stabilize
  {% endif %}

  CLEAN_NOZZLE                                                  # Clean nozzle BEFORE bed level when using TAP

  # Heating nozzle to 150 degrees. This helps with getting a correct Z-home
  SET_DISPLAY_TEXT MSG="Heating Hotend: 150c"                   # Displays info
  M109 S150                                                     # Heats the nozzle to 150c

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Z-tilt adjust"                          # Displays info
  LED_LEVELING                                                  # Sets SB-leds to leveling-mode
  Z_TILT_ADJUST                                                 # Levels the buildplate via z_tilt_adjust
  G28 Z                                                         # Homes Z again after z_tilt_adjust

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"                               # Displays info
  LED_MESHING                                                   # Sets SB-leds to bed mesh-mode
  BED_MESH_CALIBRATE                                            # Starts bed mesh

  # Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  LED_HEATING                                                   # Sets SB-leds to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                              # Goes to center of the bed
  M107                                                          # Turns off partcooling fan
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp

  # Gets ready to print by doing a purge line and updating the SB-leds
  LED_PURGE
  VORON_PURGE                                                   # KAMP adaptive purge, used with adaptive bed mesh
  G92 E0                                                        # Reset extruder	
  LED_PRINTING                                                  # Prep done, start print
  RESPOND MSG="Print in progress"
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  # safe anti-stringing move coords
  {% set th = printer.toolhead %}
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
  
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  
  M400                                                          # wait for buffer to clear
  G92 E0                                                        # zero the extruder
  G1 E-2.0 F3600                                                # retract filament
    
  TURN_OFF_HEATERS
  
  G90                                                           # absolute positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F2000                        # move nozzle to remove stringing
  G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600     # park nozzle at rear
  M107                                                          # turn off fan

  {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}

  BED_MESH_CLEAR
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#####################################################################
#  Macros
#####################################################################
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_execute: False
gcode:
  {% set user       = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filter_off = user.peripheral.filter.run_after_print %}
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  {% set retract    = user.filament.retract.end if not printer.pause_resume.is_paused 
                 else user.filament.retract.cancel %}
  SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=True
  M117 Cancel
  CANCEL_PRINT_BASE
  {% if printer['gcode_macro PRINT_START'].state == 'Prepare' %}
    {% if not printer.extruder.can_extrude %}
      {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
      M109 S{printer.configfile.settings.extruder.min_extrude_temp}
    {% endif %}
    M83
    G1 E-{retract} F{user.speed.retract}
  {% endif %}
  TURN_OFF_HEATERS
  {% if params.PARK|default(0)|int == 1 or (not printer.pause_resume.is_paused and user.park.park_at_cancel) %}
    _TOOLHEAD_PARK P={params.PARK|default(0)} X={user.park.pause.x} Y={user.park.pause.y}
  {% endif %}
  M107                                                     ; turn off fan
  {% if user.hw.chamber.fan %} M141 S{vent_on} {% endif %} ; vent chamber (setting fan to below ambient)
  _ADD_PRINT_TIME
  {% if params.ERROR|default(0)|int == 1 %}
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED BLINK=0.2 {% endif %}
    _SD_PRINT_STATS R='abort'
  {% else %}
   {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE {% endif %}
    _SD_PRINT_STATS R='canceled'
  {% endif %}
  _SD_PRINTER_STATS
  {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}
  {% if user.hw.chamber.fan %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if user.hw.filter.ena %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if user.unload_sd %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  SFS_DISABLE
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
variable_restore: {'absolute': {'coordinates': True, 'extrude': True}, 'speed': 1500}
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  ##### store coordinates to restore them at resume #####
  {% set restore = {'absolute': {'coordinates': printer.gcode_move.absolute_coordinates,
                                 'extrude'    : printer.gcode_move.absolute_extrude},
                    'speed'   : printer.gcode_move.speed} %}
  SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=restore VALUE="{restore}"
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=BLUE BLINK=1 {% endif %}
  {% if not printer.extruder.can_extrude %}
    {action_respond_info("Extruder Temp to low heat to %3.1f°C" % printer.configfile.settings.extruder.min_extrude_temp)}
    M109 S{printer.configfile.settings.extruder.min_extrude_temp}
  {% endif %}
  M83
  G0 E-{user.filament.retract.pause} F{user.speed.retract}
  PAUSE_BASE
  _TOOLHEAD_PARK P=0 X={params.X|default(user.park.pause.x)} Y={params.Y|default(user.park.pause.y)}
  M104 S{printer.extruder.target}

[gcode_macro _TOOLHEAD_PARK]
description: Helper: Park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set pos = {'x': user.park.bed.x if params.P|int == 1 
                else params.X,
                'y': user.park.bed.y if params.P|int == 1 
                else params.Y,
                'z': user.park.bed.z if params.P|int == 1 
                else [(printer.toolhead.position.z + user.park.pause.dz), printer.toolhead.axis_maximum.z]|min} %}
  G90
  G0 Z{pos.z} F{user.speed.z_hop}
  G0 X{pos.x} Y{pos.y} F{user.speed.travel}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set restore  = printer["gcode_macro PAUSE"].restore %}
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED {% endif %}
  RESUME_BASE VELOCITY={params.VELOCITY|default(user.speed.travel/60)}  
  G0 E{user.filament.retract.pause} F{user.speed.retract}
  G0 F{restore.speed}
  {% if restore.absolute.extrude %}         M82 {% endif %} ; set back to absolute
  {% if not restore.absolute.coordinates %} G91 {% endif %} ; set back to relative

  # You can specify the park_pos variable manually if you do not want 
# to use a _USER_VARIABLE macro, The set statement would look like:
# {% set park_pos = {'x': val, 'y': val, 'z': val} %}
# e.g.
# {% set park_pos = {'x': 175.0, 'y': 25.0, 'z': 30.0 } %}

[gcode_macro PARK]
description: Park tool head at specified location. Usage PARK [P=[bed|center|front|frontlow|rear](bed)]
gcode:
  {% if params.P and params.P|lower is not in ['bed','center','front','frontlow','rear'] %}
    {action_respond_info("\"PARK P=%s\" not valid. Use P=[BED,CENTER,FRONT,FRONTLOW,REAR]
                            Default position BED will be used." % params.P|upper)}
  {% else %}
    {% set user = printer['gcode_macro _USER_VARIABLE'] %}
    {% set pos = params.P|default('bed')|lower %}
    _CG28                 ; home if not already homed
    G90                   ; absolute positioning
    G0 X{user.park[pos].x} Y{user.park[pos].y} Z{user.park[pos].z} F{user.speed.travel}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set back to relative
  {% endif %}

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
  PARK P='BED'

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
  PARK P='CENTER'

# Park front center
[gcode_macro PARKFRONT]
gcode:
  PARK P='FRONT'

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
  PARK P='FRONTLOW'

# Park top rear left
[gcode_macro PARKREAR]
gcode:
  PARK P='REAR'

#####################################################################
# 	Macro
#####################################################################
#
#   This section contains basic macros that needed in several other
#   files. Getting them all to a single place should help to only
#   use what needed without hunting down several other files.
#
#####################################################################
##  Clear display output after Duration in seconds
##  Use: UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
[delayed_gcode _CLEAR_DISPLAY]
gcode:
  M117

## Reset SD File after Print_END or CANCEL_PRINT
## This will avoid the reprint option in Mainsail after a print is done
[delayed_gcode _DELAY_SDCARD_RESET_FILE]
gcode:
  SDCARD_RESET_FILE

[gcode_macro DIRECT_MOVE]
gcode:
  {% set out_param = ["G0"] %}
  {% set _dummy = out_param.append("X%s" % params.X) if params.X %}
  {% set _dummy = out_param.append("Y%s" % params.Y) if params.Y %}
  {% set _dummy = out_param.append("Z%s" % params.Z) if params.Z %}
  {% set _dummy = out_param.append("E%s" % params.E) if params.E %}
  {% set _dummy = out_param.append("F%s" % params.F) if params.F %}
  {out_param|join(" ")}

##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set out = ['mcu build version:'] %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% if name2 is in ['mcu_version'] %}
        {% set _dummy = out.append("%s: %s" % (name1, printer[name1][name2])) %}
      {% endif %}
    {% endfor %}
  {% endfor %}
  {action_respond_info(out|join("\n"))}
  M115.1

[gcode_macro CENTER]
description: Moves the toolhead to the center
gcode:
  _CG28
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y{x_center} F7800

[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  _CG28
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800

[gcode_macro LIGHT_ON]
variable_delay_ms: 50
variable_led_count: 8
gcode:
  {% for led_index in range(1, led_count + 1) %}
    SET_LED LED=rgb1 RED=0.8 GREEN=0.8 BLUE=0.99 INDEX={led_index}
    SET_LED LED=rgb2 RED=0.8 GREEN=0.8 BLUE=0.99 INDEX={led_index}
    G4 P{delay_ms}
  {% endfor %}
