#####################################################################
#   Fan Control
#####################################################################

##  Print Cooling Fan - FAN0
[fan]
pin: PA8
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

##  Hotend Fan - FAN1
[heater_fan hotend_fan]
pin: PE5
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

[fan_generic controller_fan]
#  Controller fan - FAN2
#  Generic so it can be controlled via delayed_gcode
pin: PD12
max_power: 1.0
kick_start_time: 0.5

# [temperature_fan controller_fan]
# ##  Controller fan - FAN2
# # Temperature controlled so it's not running all the time. 
# pin: PD12
# control: watermark
# max_delta: 3.0
# sensor_type: temperature_host
# min_temp: 0
# max_temp: 100
# target_temp: 60

# [heater_fan exhaust_fan]
# ##  Exhaust fan - FAN3
# pin: PD13
# max_power: 1.0
# shutdown_speed: 0.0
# kick_start_time: 5.0
# heater: heater_bed
# heater_temp: 60
# fan_speed: 1.0

##  Exhaust fan - FAN3
[temperature_fan chamber]
pin: PD13
max_power: 1.0
shutdown_speed: 0.0
cycle_time: 0.0005     #2 kHz PWM signal
hardware_pwm: False
kick_start_time: 0
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PF5
min_temp: 0
max_temp: 70
target_temp: 0
max_speed: 1.0 #0.7
min_speed: 0.1
control: pid
pid_Kp: 2.0     ;40
pid_Ki: 5.0     ;0.2
pid_Kd: 0.5     ;0.1
pid_deriv_time: 2.0
gcode_id: C

[fan_generic nevermore_fan]
## Nevermore - FAN4 on Octopus
pin: PD14

#####################################################################
# 	TEMPERATURE SENSORS
#####################################################################

[temperature_sensor chamber_temp]
## Chamber Temperature - T1
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: PF5
min_temp: 0
max_temp: 100
gcode_id: chamber_th

## Temperature of the MCU
[temperature_sensor Octopus_MCU]
sensor_type: temperature_mcu
min_temp: 10
max_temp: 100

## Temperature of the Raspberry PI
[temperature_sensor RPi]
sensor_type: temperature_host
min_temp: 10
max_temp: 100
gcode_id: PI

########################################
##          Macros
########################################

# Start Pi temp monitoring loop.
[delayed_gcode skirt_fan_boot]
initial_duration: 1.0
gcode:
  {% if printer.print_stats.state|lower != "printing" %}
    SET_FAN_SPEED FAN=controller_fan SPEED=0.5
  {% else %}
    SET_FAN_SPEED FAN=controller_fan SPEED=0.75 #just so I can see if this is getting called
  {% endif %}
  UPDATE_DELAYED_GCODE ID=skirt_fan DURATION=5

# Pi temperature monitoring loop. Check temp every 5 minutes & turn on skirt fans if too hot. Turn off if cool.
[delayed_gcode  ]
gcode:
  {% if printer.print_stats.state|lower != "printing" %}
    {% if printer['temperature_sensor RPi'].temperature >= 50 %}
      SET_FAN_SPEED FAN=controller_fan SPEED=1
    {% elif  printer['temperature_sensor RPi'].temperature < 40 %}
      SET_FAN_SPEED FAN=controller_fan SPEED=0
    {% endif %}
  {% else %}
    SET_FAN_SPEED FAN=controller_fan SPEED=1
  {% endif %}
  UPDATE_DELAYED_GCODE ID=skirt_fan DURATION=300


# M106 with lock and manual set feature
# M106 S128 M1 will update the fan in any case
[gcode_macro M106]
description: set fan with manual override and lock option
rename_existing: M106.1
gcode:
  {% if printer['output_pin lock_M106'].value|int == 0 or params.M|default(0) == '1' %}
    M106.1 {rawparams}
  {% else %}
    {action_respond_info("M106 update is locked")}
  {% endif %}
  
[gcode_macro M141]
description: Set temperature of chamber fan
gcode: SET_TEMPERATURE_FAN_TARGET temperature_fan=chamber target={params.S|default(0)}
    
[gcode_macro _SET_FILTER]
description: Helper: Set Nevermore filter speed
gcode: SET_FAN_SPEED FAN=filter SPEED={params.S|default(0)}

[gcode_macro _FILTER_ON]
description: Helper: Nevermore on
gcode: _SET_FILTER S={printer['gcode_macro _USER_VARIABLE'].peripheral.filter.on_val}
  
[gcode_macro FILTER]
description: Toggle Nevermore fan
gcode:
  {% if printer['fan_generic filter'].speed|float > 0.0 %} _SET_FILTER {% else %} _FILTER_ON {% endif %}
  _FILTER_INFO

[delayed_gcode _DELAY_FILTER_OFF]
gcode:
  {% if printer.print_stats.state|lower != "paused" and printer.print_stats.state|lower != "printing" %}
    _SET_FILTER
    _FILTER_INFO
  {% endif %}

##  Chamber Ventilation Control in Mainsail
[gcode_macro VENT]
description: Toggle Chamber fan
gcode:
    {% if printer['temperature_fan chamber'].target|float > 0 and 
          printer['temperature_fan chamber'].target|float <= printer['gcode_macro _USER_VARIABLE'].peripheral.vent.on_val|float %}
        M141
    {% else %}
        M141 S{printer['gcode_macro _USER_VARIABLE'].peripheral.vent.on_val}
    {% endif %}
    _VENT_INFO

[delayed_gcode _DELAY_VENT_OFF]
gcode:
  {% if printer.print_stats.state|lower != "paused" and printer.print_stats.state|lower != "printing" %}
    M141
    _VENT_INFO
  {% endif %}

[gcode_macro _VENT_INFO]
description: Helper: Print chamber fan temperature
gcode:
  {% set txt = "off" if printer['temperature_fan chamber'].target == 0 
          else "target temp: %2dC" % printer['temperature_fan chamber'].target %}
  {action_respond_info("Chamber fan %s" % txt)}
    
[gcode_macro _FILTER_INFO]
description: Helper: Print Nevermore speed
gcode: {action_respond_info("Filter fan %s" % 'on' if printer['fan_generic filter'].speed|float > 0.0 else 'off')}
